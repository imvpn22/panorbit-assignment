{"version":3,"sources":["actions/index.js","actionTypes.js","components/Home.js","components/Profile.js","App.js","serviceWorker.js","reducers/users.js","enhancers/monitorReducer.js","middleware/logger.js","index.js"],"names":["getUserList","dispatch","a","Axios","get","res","getUserListSuccess","data","users","type","getUserData","userId","Home","state","this","props","actions","then","setState","className","map","user","idx","key","href","id","src","profilepicture","style","backgroundImage","name","Component","connect","bindActionCreators","Profile","userData","params","match","parseInt","find","console","log","App","path","component","Boolean","window","location","hostname","action","activeUser","monitorReducerEnhancer","createStore","reducer","initialState","enhancer","number","start","performance","now","newState","end","diff","Math","round","logger","store","next","group","info","result","getState","groupEnd","middlewareEnhancer","applyMiddleware","loggerMiddleware","thunkMiddleware","composedEnhancers","compose","rootReducer","undefined","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e9002f48.chunk.js","sourcesContent":["import Axios from 'axios';\nimport { GET_USER_LIST_SUCCESS, GET_USER_DATA } from '../actionTypes';\n\nexport const getUserList = () => {\n  return async dispatch => {\n    const res = await Axios.get('https://panorbit.in/api/users.json');\n    dispatch(getUserListSuccess(res.data.users));\n    // .catch(err => console.log(err));\n  };\n};\n\nexport const getUserListSuccess = res => ({\n  type: GET_USER_LIST_SUCCESS,\n  res\n});\n\nexport const getUserData = userId => ({\n  type: GET_USER_DATA,\n  userId\n});\n","export const GET_USER_LIST_SUCCESS = 'GET_USER_LIST_SUCCESS';\nexport const GET_USER_DATA = 'GET_USER_DATA';\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport * as actions from '../actions';\n\nclass Home extends Component {\n  state = {\n    users: []\n  };\n\n  componentDidMount() {\n    // APi call to load profiles\n    this.props.actions.getUserList().then(() => {\n      this.setState({ users: this.props.users });\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"page-cont\">\n        <div className=\"user-list-cont\">\n          <div className=\"list-header\">Select an account</div>\n          <div className=\"list-body\">\n            {this.state.users.map((user, idx) => (\n              <a className=\"list-item\" key={idx} href={'/profile/' + user.id}>\n                <div\n                  className=\"item-img\"\n                  src={user.profilepicture}\n                  style={{\n                    backgroundImage: 'url(' + user.profilepicture + ')'\n                  }}\n                ></div>\n                <div>{user.name}</div>\n              </a>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  users: state.users\n});\n\nconst mapDispatchToProps = dispatch => ({\n  actions: bindActionCreators(actions, dispatch)\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport * as actions from '../actions';\n\nclass Profile extends Component {\n  state = {\n    userData: {}\n  };\n\n  componentDidMount() {\n    const {\n      match: { params }\n    } = this.props;\n    const userId = parseInt(params.userId, 10);\n\n    this.props.actions.getUserList().then(() => {\n      const userData = this.props.users.find(user => user.id === userId);\n\n      this.setState({ users: this.props.users, userData });\n    });\n  }\n\n  render() {\n    console.log(this.state.userData);\n    return <div>I am profile</div>;\n  }\n}\n\nconst mapStateToProps = state => ({\n  users: state.users\n});\n\nconst mapDispatchToProps = dispatch => ({\n  actions: bindActionCreators(actions, dispatch)\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Profile);\n","import React from 'react';\nimport './App.scss';\n\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport Home from './components/Home';\nimport Profile from './components/Profile';\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/profile/:userId\" component={Profile} />\n        <Route path=\"/\" component={Home} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { GET_USER_DATA, GET_USER_LIST_SUCCESS } from '../actionTypes';\n\nconst users = (state = [], action) => {\n  switch (action.type) {\n    case GET_USER_LIST_SUCCESS:\n      return { ...state, users: action.res };\n    case GET_USER_DATA:\n      return {\n        ...state,\n        activeUser: state.users.find(user => user.id === action.userId)\n      };\n    default:\n      return state;\n  }\n};\n\nexport default users;\n","const round = number => Math.round(number * 100) / 100;\n\nconst monitorReducerEnhancer = createStore => (\n  reducer,\n  initialState,\n  enhancer\n) => {\n  const monitoredReducer = (state, action) => {\n    const start = performance.now();\n    const newState = reducer(state, action);\n    const end = performance.now();\n    const diff = round(end - start);\n\n    console.log('reducer process time:', diff);\n\n    return newState;\n  };\n\n  return createStore(monitoredReducer, initialState, enhancer);\n};\n\nexport default monitorReducerEnhancer;\n","const logger = store => next => action => {\n  console.group(action.type);\n  console.info('dispatching', action);\n  let result = next(action);\n  console.log('next state', store.getState());\n  console.groupEnd();\n  return result;\n};\n\nexport default logger;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport rootReducer from './reducers/users';\nimport monitorReducerEnhancer from './enhancers/monitorReducer';\nimport thunkMiddleware from 'redux-thunk';\nimport loggerMiddleware from './middleware/logger';\n\nconst middlewareEnhancer = applyMiddleware(loggerMiddleware, thunkMiddleware);\nconst composedEnhancers = compose(middlewareEnhancer, monitorReducerEnhancer);\n\nconst store = createStore(rootReducer, undefined, composedEnhancers);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}